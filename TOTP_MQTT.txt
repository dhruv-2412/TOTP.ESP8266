#include <ESP8266WiFi.h>
#include <TOTP.h>
#include <ezTime.h>
#include <PubSubClient.h>

// WiFi Configuration
const char* ssid     = "your ssid";
const char* password = "your password";

// MQTT Configuration
const char* mqtt_server = "broker.emqx.io";
const char* mqtt_user = "ABCD123"; 
const char* mqtt_password = "ABCD123";  
const char* mqtt_topic = "your/topic";

WiFiClient espClient;
PubSubClient client(espClient);

// Track if the initial connection message has been sent
bool initialConnectionSent = false;

// Function to convert MAC address to byte array
void macToBytes(const char* macStr, uint8_t* bytes) {
  for (int i = 0; i < 6; i++) {
    sscanf(macStr + 3*i, "%2hhx", &bytes[i]);
  }
}

void connectWifi() {
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");

  int retries = 0;
  while (WiFi.status() != WL_CONNECTED && retries < 20) {
    delay(1000);
    Serial.print(".");
    retries++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("Connected to WiFi");
  } else {
    Serial.println("Failed to connect to WiFi");
  }
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a unique client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str(), mqtt_user, mqtt_password)) {
      Serial.println("connected");
      // Only publish the connection message once
      if (!initialConnectionSent) {
        client.publish(mqtt_topic, "ESP8266 connected");
        initialConnectionSent = true;
      }
      // ... and resubscribe
      client.subscribe(mqtt_topic);
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

bool publishMessage(const char* topic, const char* payload) {
  if (!client.connected()) {
    reconnect();
  }
  bool result = client.publish(topic, payload);
  if (!result) {
    Serial.println("Failed to publish message, retrying...");
    reconnect();
    result = client.publish(topic, payload);
  }
  return result;
}

void setup() {
  Serial.begin(115200);

  connectWifi();

  // Setup MQTT client
  client.setServer(mqtt_server, 1883);

  // ezTime
  waitForSync();
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // Update the internal clock
  events();

  // Retrieve MAC address and convert to byte array
  uint8_t hmacKey[6];
  String macStr = WiFi.macAddress();
  macToBytes(macStr.c_str(), hmacKey);

  // Initialize TOTP with the MAC address as the key
  TOTP totp = TOTP(hmacKey, sizeof(hmacKey));
  
  // Generate the OTP
  char* otp = totp.getCode(UTC.now());
  Serial.println("Current OTP: " + String(otp));
  Serial.println(UTC.now());
  
  // Publish the OTP to the MQTT topic
  if (!publishMessage(mqtt_topic, otp)) {
    Serial.println("Failed to publish OTP");
  }

  // Wait for 30 seconds before generating the next OTP
  delay(30000);
}